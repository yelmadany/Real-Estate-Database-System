/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package cmp320project;

import java.sql.ResultSet;
import javax.swing.JOptionPane;
import java.sql.SQLException;
import oracle.sql.BLOB;
/**
 *
 * @author Layth (edu)
 */
public class LoginUser extends javax.swing.JFrame {
    JDBCConnection Con;
    ResultSet rs;
    boolean valid_login = false;
    boolean showpass = false;

    public LoginUser() {
        initComponents();
        
         this.setLocationRelativeTo(null);
         Con = new JDBCConnection();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        Exit = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        ID = new javax.swing.JTextField();
        Password = new javax.swing.JPasswordField();
        LoginButton = new javax.swing.JButton();
        ShowPassword = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        ErrorID = new javax.swing.JLabel();
        ErrorPass = new javax.swing.JLabel();

        jMenu1.setText("jMenu1");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("The Basha Real Estate Company");
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Login Menu ");
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabel1.setName(""); // NOI18N

        Exit.setText("Exit");
        Exit.setContentAreaFilled(false);
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });

        jLabel2.setText("ID:");

        jLabel3.setText("Password:");

        ID.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        ID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IDActionPerformed(evt);
            }
        });

        Password.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Password.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PasswordActionPerformed(evt);
            }
        });

        LoginButton.setText("Login");
        LoginButton.setContentAreaFilled(false);
        LoginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoginButtonActionPerformed(evt);
            }
        });

        ShowPassword.setText("Show Password");
        ShowPassword.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ShowPasswordStateChanged(evt);
            }
        });
        ShowPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowPasswordActionPerformed(evt);
            }
        });

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cmp320project/login pic.jpg"))); // NOI18N

        jLabel4.setText("Version 1.000 ------ Alpha Mode");

        ErrorID.setForeground(new java.awt.Color(255, 51, 51));

        ErrorPass.setForeground(new java.awt.Color(255, 51, 51));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(Password, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                                    .addComponent(ID))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(ErrorID, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
                                    .addComponent(ErrorPass, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(LoginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32)
                                .addComponent(ShowPassword)
                                .addGap(36, 36, 36)
                                .addComponent(Exit, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel4)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                        .addComponent(jLabel5)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ErrorID, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(ID, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Password, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ErrorPass, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(LoginButton)
                            .addComponent(ShowPassword)
                            .addComponent(Exit))
                        .addGap(37, 37, 37)
                        .addComponent(jLabel4))
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(7, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private boolean validateData() {
        boolean valid = true;
        int userlength = ID.getText().length();
        int passlength = Password.getText().length();
        if(userlength > 25 || userlength < 1){
            valid = false;
            if(userlength < 1){
                ErrorID.setText("Cannot Be Empty");
            }
            else  ErrorID.setText("Too Long");
        }
        if(passlength > 25 || passlength < 1){
            valid = false;
            if(passlength < 1){
                ErrorPass.setText("Cannot Be Empty");
            }
            else ErrorPass.setText("Too Long");
        }
        if(!valid){
            javax.swing.JLabel label = new javax.swing.JLabel("Error in username/password length");
            label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
            
        return valid;
}
        

    
    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_ExitActionPerformed

    private void IDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IDActionPerformed
        // TODO add your handling code here:
        if(validateData()){

       try {
           
            rs = Con.executeStatement("select * from Admin where Admin_id = " + ID.getText()+ " and password = '" + Password.getText() +"'"); //select from admin
            if (rs.next()) {
                valid_login = true;         //valid_login used to figure out if login is successful
                    (new AdminGUI(new Admin(rs.getInt("Admin_id"), rs.getString("Admin_name"),rs.getString("Password"), (BLOB) rs.getBlob("Admin_picture")))).setVisible(true); // create admin gui if username and password match in the admin database
                    this.dispose(); // remove this login from from memory 
                }
            else{
                rs = Con.executeStatement("select * from Agent where Agent_ID = " + ID.getText()+ " and password = '" + Password.getText() +"'"); //select from agent
                if(rs.next()){
                valid_login = true;
                    (new AgentGUI(new Agent(rs.getInt("Agent_id"), rs.getString("Agent_name"), rs.getString("Password"), rs.getInt("Salary"), (BLOB) rs.getBlob("Agent_picture")))).setVisible(true); // create Agent gui if username and password match in the Agent database
                    this.dispose(); // remove this login from from memory 
                }
                    else{
                            rs = Con.executeStatement("select * from owner where OWNER_ID = "+ ID.getText()+ " and password = '" + Password.getText() +"'"); //select from owners and renters
                            if(!rs.next()){
                                rs = Con.executeStatement("select * from renter where Renter_id = "+ ID.getText()+ " and password = '" + Password.getText() +"'");
                            }
                            rs.beforeFirst();
                            if(rs.next()){
                                valid_login = true;
                                (new CustomerGUI(new Customer(rs.getInt(1), rs.getString("Name"),rs.getString("Password")))).setVisible(true); // create customer gui if username and password match in the renter and owner database
                                 this.dispose(); // remove this login from from memory 
                   }
                
            }
        }
      }
        catch (SQLException e) { // this is an SQL error
            javax.swing.JLabel label = new javax.swing.JLabel("SQL Error - " + e.getMessage());
            label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
       
        if (!valid_login) { // this mean Invalid credentials 
            javax.swing.JLabel label = new javax.swing.JLabel("Wrong username/password.");
            label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_IDActionPerformed

    private void PasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PasswordActionPerformed
        // TODO add your handling code here:
        if(validateData()){

       try {
           
            rs = Con.executeStatement("select * from Admin where Admin_id = " + ID.getText()+ " and password = '" + Password.getText() +"'"); //select from admin
            if (rs.next()) {
                valid_login = true;         //valid_login used to figure out if login is successful
                    (new AdminGUI(new Admin(rs.getInt("Admin_id"), rs.getString("Admin_name"),rs.getString("Password"), (BLOB) rs.getBlob("Admin_picture")))).setVisible(true); // create admin gui if username and password match in the admin database
                    this.dispose(); // remove this login from from memory 
                }
            else{
                rs = Con.executeStatement("select * from Agent where Agent_ID = " + ID.getText()+ " and password = '" + Password.getText() +"'"); //select from agent
                if(rs.next()){
                valid_login = true;
                    (new AgentGUI(new Agent(rs.getInt("Agent_id"), rs.getString("Agent_name"), rs.getString("Password"), rs.getInt("Salary"), (BLOB) rs.getBlob("Agent_picture")))).setVisible(true); // create Agent gui if username and password match in the Agent database
                    this.dispose(); // remove this login from from memory 
                }
                    else{
                            rs = Con.executeStatement("select * from owner where OWNER_ID = "+ ID.getText()+ " and password = '" + Password.getText() +"'"); //select from owners and renters
                            if(!rs.next()){
                                rs = Con.executeStatement("select * from renter where Renter_id = "+ ID.getText()+ " and password = '" + Password.getText() +"'");
                            }
                            rs.beforeFirst();
                            if(rs.next()){
                                valid_login = true;
                                (new CustomerGUI(new Customer(rs.getInt(1), rs.getString("Name"),rs.getString("Password")))).setVisible(true); // create customer gui if username and password match in the renter and owner database
                                 this.dispose(); // remove this login from from memory 
                   }
                
            }
        }
      }
        catch (SQLException e) { // this is an SQL error
            javax.swing.JLabel label = new javax.swing.JLabel("SQL Error - " + e.getMessage());
            label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
       
        if (!valid_login) { // this mean Invalid credentials 
            javax.swing.JLabel label = new javax.swing.JLabel("Wrong username/password.");
            label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_PasswordActionPerformed

    private void ShowPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowPasswordActionPerformed
        // TODO add your handling code here:
        //Password 
        if(ShowPassword.isSelected()){
            
            Password.setEchoChar((char)0);
        }
        
        else{
            
            Password.setEchoChar('*');
        }
    }//GEN-LAST:event_ShowPasswordActionPerformed
    
    private void LoginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoginButtonActionPerformed
        // TODO add your handling code here:
        if(validateData()){

       try {
           
            rs = Con.executeStatement("select * from Admin where Admin_id = " + ID.getText()+ " and password = '" + Password.getText() +"'"); //select from admin
            if (rs.next()) {
                valid_login = true;         //valid_login used to figure out if login is successful
                    (new AdminGUI(new Admin(rs.getInt("Admin_id"), rs.getString("Admin_name"),rs.getString("Password"), (BLOB) rs.getBlob("Admin_picture")))).setVisible(true); // create admin gui if username and password match in the admin database
                    this.dispose(); // remove this login from from memory 
                }
            else{
                rs = Con.executeStatement("select * from Agent where Agent_ID = " + ID.getText()+ " and password = '" + Password.getText() +"'"); //select from agent
                if(rs.next()){
                valid_login = true;
                    (new AgentGUI(new Agent(rs.getInt("Agent_id"), rs.getString("Agent_name"), rs.getString("Password"), rs.getInt("Salary"), (BLOB) rs.getBlob("Agent_picture")))).setVisible(true); // create Agent gui if username and password match in the Agent database
                    this.dispose(); // remove this login from from memory 
                }
                    else{
                            rs = Con.executeStatement("select * from owner where OWNER_ID = "+ ID.getText()+ " and password = '" + Password.getText() +"'"); //select from owners and renters
                            if(!rs.next()){
                                rs = Con.executeStatement("select * from renter where Renter_id = "+ ID.getText()+ " and password = '" + Password.getText() +"'");
                            }
                            rs.beforeFirst();
                            if(rs.next()){
                                valid_login = true;
                                (new CustomerGUI(new Customer(rs.getInt(1), rs.getString("Name"),rs.getString("Password")))).setVisible(true); // create customer gui if username and password match in the renter and owner database
                                 this.dispose(); // remove this login from from memory 
                   }
                
            }
        }
      }
        catch (SQLException e) { // this is an SQL error
            javax.swing.JLabel label = new javax.swing.JLabel("SQL Error - " + e.getMessage());
            label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
       
        if (!valid_login) { // this mean Invalid credentials 
            javax.swing.JLabel label = new javax.swing.JLabel("Wrong username/password.");
            label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_LoginButtonActionPerformed

    private void ShowPasswordStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ShowPasswordStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_ShowPasswordStateChanged



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ErrorID;
    private javax.swing.JLabel ErrorPass;
    private javax.swing.JButton Exit;
    private javax.swing.JTextField ID;
    private javax.swing.JButton LoginButton;
    private javax.swing.JPasswordField Password;
    private javax.swing.JCheckBox ShowPassword;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables


}
